/*
 * This file is part of the SmuView project.
 *
 * Copyright (C) 2012 Joel Holdsworth <joel@airwebreathe.org.uk>
 * Copyright (C) 2017 Frank Stettner <frank-stettner@gmx.net>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef TOOLBARS_MAINTOOLBAR_HPP
#define TOOLBARS_MAINTOOLBAR_HPP

#include <cstdint>
#include <list>
#include <memory>

#include <glibmm/variant.h>

#include <QComboBox>
#include <QDoubleSpinBox>
#include <QMenu>
#include <QToolBar>
#include <QToolButton>

#include <src/session.hpp>
//#include <src/views/trace/standardbar.hpp>
//#include <src/widgets/devicetoolbutton.hpp>
//#include <src/widgets/popuptoolbutton.hpp>

using std::shared_ptr;

namespace sigrok {
class Device;
class InputFormat;
class OutputFormat;
}

Q_DECLARE_METATYPE(shared_ptr<sigrok::Device>)

class QAction;

namespace sv {

class MainWindow;
class Session;

namespace toolbars {

class MainToolBar : public QToolBar
{
	Q_OBJECT

private:
	/**
	 * Name of the setting used to remember the directory
	 * containing the last file that was opened.
	 */
	static const char *SettingOpenDirectory;

	/**
	 * Name of the setting used to remember the directory
	 * containing the last file that was saved.
	 */
	static const char *SettingSaveDirectory;


protected:
	Session &session_;

public:
	MainToolBar(Session &session, QWidget *parent);

	void update_device_list();

	void set_capture_state(sv::Session::capture_state state);

	void reset_device_selector();

	QAction* action_new_view() const;
	//QAction* action_open() const;
	//QAction* action_save_as() const;
	//QAction* action_save_selection_as() const;
	QAction* action_connect() const;

	void session_error(const QString text, const QString info_text);

private:
	void run_stop();

	void select_init_device();

	void save_selection_to_file();

	void update_device_config_widgets();

	QAction *const action_new_view_;
	//QAction *const action_open_;
	//QAction *const action_save_as_;
	//QAction *const action_save_selection_as_;
	QAction *const action_connect_;

private Q_SLOTS:
	void show_session_error(const QString text, const QString info_text);

	//void export_file(shared_ptr<sigrok::OutputFormat> format,
	//	bool selection_only = false);
	//void import_file(shared_ptr<sigrok::InputFormat> format);

	void on_capture_state_changed(int state);

	void on_config_changed();

	void on_actionNewView_triggered();

	//void on_actionOpen_triggered();
	//void on_actionSaveAs_triggered();
	//void on_actionSaveSelectionAs_triggered();

	void on_actionConnect_triggered();

protected:
	void add_toolbar_widgets();

	bool eventFilter(QObject *watched, QEvent *event);

Q_SIGNALS:
	void new_view(Session *session);

private:
	//QToolButton *open_button_, *save_button_;

};

} // namespace toolbars
} // namespace sv

#endif // TOOLBARS_MAINTOOLBAR_HPP
