/*
 * This file is part of the SmuView project.
 *
 * Copyright (C) 2012 Joel Holdsworth <joel@airwebreathe.org.uk>
 * Copyright (C) 2016 Soeren Apel <soeren@apelpie.net>
 * Copyright (C) 2018 Frank Stettner <frank-stettner@gmx.net>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 */

#ifndef CHANNELS_BASECHANNEL_HPP
#define CHANNELS_BASECHANNEL_HPP

#include <memory>
#include <utility>
#include <vector>

#include <QColor>
#include <QObject>
#include <QSettings>

using std::map;
using std::pair;
using std::shared_ptr;
using std::vector;

namespace sigrok {
class Channel;
class Quantity;
class QuantityFlag;
class Unit;
}

namespace sv {

namespace data {
class BaseSignal;
}

namespace channels {

enum class ChannelType {
	/**
	 * Channels with analog data (Power suplys, loads, DMMs)
	 */
	AnalogChannel,
	/**
	 * Virtual channel generated by math operations
	 */
	MathChannel
};

class BaseChannel : public QObject
{
	Q_OBJECT

public:
	BaseChannel(
		const QString device_name, // TODO: replace with device object?
		const QString channel_group_name, // TODO: replace with ? object?
		double channel_start_timestamp);
	virtual ~BaseChannel();

public:
	typedef pair<const sigrok::Quantity *, vector<const sigrok::QuantityFlag *>> quantity_t;

	/**
	 * Returns enabled status of this channel.
	 */
	virtual bool enabled() const;

	/**
	 * Sets the enabled status of this channel.
	 * @param value Boolean value to set.
	 */
	virtual void set_enabled(bool value);

	/**
	 * Gets the type of this channel.
	 */
	ChannelType type() const;

	/**
	 * Gets the index number of this channel, i.e. a unique ID assigned by
	 * the device driver.
	 */
	virtual unsigned int index() const = 0;

	/**
	 * Does this channel have just one signal, thats quantity doesn't chege?
	 */
	bool has_fixed_signal();

	/**
	 * Sets if this channel has just one signal, thats quantity doesn't chege
	 */
	void set_fixed_signal(bool has_fixed_signal);

	/**
	 * Gets the actual signal
	 */
	shared_ptr<data::BaseSignal> actual_signal();

	/**
	 * Get all signals for this channel
	 */
	map<quantity_t, shared_ptr<data::BaseSignal>> signal_map();

	/**
	 * Get the channel group name, the channel is in. Returns "" if the channel
	 * is not in a channel group.
	 *
	 * TODO: Change to vector<QString>, bc the channel can be in more than one
	 *       channel group (see "demo" driver)
	 */
	QString channel_group_name() const;

	/**
	 * Gets the name of this channel, i.e. how the device calls it.
	 */
	QString name() const;

	/**
	 * Sets the name of the signal.
	 */
	virtual void set_name(QString name);

	/**
	 * Gets the display name of this channel.
	 */
	QString display_name() const;

	/**
	 * Get the colour of the signal.
	 */
	QColor colour() const;

	/**
	 * Set the colour of the signal.
	 */
	void set_colour(QColor colour);

	/**
	 * Inits a signal
	 */
	virtual shared_ptr<data::BaseSignal> init_signal(
		const sigrok::Quantity *sr_quantity,
		vector<const sigrok::QuantityFlag *> sr_quantity_flags,
		const sigrok::Unit *sr_unit) = 0;

	virtual void save_settings(QSettings &settings) const;
	virtual void restore_settings(QSettings &settings);

protected:
	ChannelType channel_type_;
	double channel_start_timestamp_;
	bool has_fixed_signal_;

	shared_ptr<data::BaseSignal> actual_signal_;
	map<quantity_t, shared_ptr<data::BaseSignal>> signal_map_;

	const QString device_name_; // TODO: better way?
	const QString channel_group_name_; // TODO: better way?
	QString name_;
	QColor colour_;

public Q_SLOTS:
	void on_aquisition_start_timestamp_changed(double);

Q_SIGNALS:
	void channel_start_timestamp_changed(double);
	void enabled_changed(const bool &value);
	void name_changed(const QString &name);
	void colour_changed(const QColor &colour);
	void signal_changed();

};

} // namespace channels
} // namespace sv

#endif // CHANNELS_BASECHANNEL_HPP
